/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.BorderLayout;
import java.time.LocalDate;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import org.jfree.chart.*;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

import DAO.DAO_ChiTietHoaDon;
import DAO.DAO_HoaDon;
import DAO.DAO_KhachHang;
import ENTITY.ChiTietHoaDon;
import ENTITY.HoaDon;
import ENTITY.KhachHang;

/**
 *
 * @author ADMIN
 */
public class GUI_ThongKeTheoThang extends javax.swing.JPanel {

    /**
     * Creates new form GUI_HangBay
     */
	
	// DAO
			private DAO_KhachHang dao_kh = new DAO_KhachHang();
			private DAO_HoaDon dao_hd = new DAO_HoaDon();
			private DAO_ChiTietHoaDon dao_cthd = new DAO_ChiTietHoaDon();

		// LIST
			private ArrayList<KhachHang> listKH;
			private ArrayList<HoaDon> listHD;
			private ArrayList<ChiTietHoaDon> listCTHD;
	
    private GUI_TongQuanThongKeTheoThang guiTongQuanTheoThang;
    private GUI_ChiTietThongKeTheoThang guiChiTietTheoThang;
    
    public GUI_ThongKeTheoThang() {
        guiTongQuanTheoThang = new GUI_TongQuanThongKeTheoThang();
        guiChiTietTheoThang = new GUI_ChiTietThongKeTheoThang();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelChart = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbNam = new javax.swing.JComboBox<>();
        cbThang = new javax.swing.JComboBox<>();
        btnTongQuan = new javax.swing.JButton();
        btnChiTiet = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        

        javax.swing.GroupLayout panelChartLayout = new javax.swing.GroupLayout(panelChart);
        panelChart.setLayout(panelChartLayout);
        panelChartLayout.setHorizontalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChartLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelChartLayout.setVerticalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChartLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addContainerGap(337, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(10, 90, 110));
        jLabel3.setText("Tháng:");

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(10, 90, 110));
        jLabel2.setText("Thống kê doanh thu theo tháng trong năm");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(10, 90, 110));
        jLabel5.setText("Năm:");

        cbNam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2020", "2021", "2022", "2023", "2024" }));

        cbThang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        btnTongQuan.setBackground(new java.awt.Color(10, 90, 110));
        btnTongQuan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTongQuan.setForeground(new java.awt.Color(255, 255, 255));
        btnTongQuan.setText("Tổng quan");
        btnTongQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTongQuanActionPerformed(evt);
            }
        });

        btnChiTiet.setBackground(new java.awt.Color(10, 90, 110));
        btnChiTiet.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnChiTiet.setForeground(new java.awt.Color(255, 255, 255));
        btnChiTiet.setText("Chi tiết");
        btnChiTiet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(218, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbNam, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbThang, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(48, 48, 48)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnChiTiet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTongQuan))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbThang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTongQuan))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChiTiet))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(201, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTongQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTongQuanActionPerformed
        // TODO add your handling code here:
//        switchPanel(panelChart, guiTongQuanTheoThang);
//        String thang = getSelectedMonThValue();
//        String nam = getSelectedYearValue();
//        JFreeChart chart = createBarChartByMonth(thang, nam); // Sử dụng dữ liệu động
//        ChartPanel chartPanel = new ChartPanel(chart);
//
//        panelChart.removeAll();
//        panelChart.setLayout(new BorderLayout());
//        panelChart.add(chartPanel, BorderLayout.CENTER);
//        panelChart.revalidate();
//        panelChart.repaint();
    	
    	
    	int month = Integer.parseInt(cbThang.getSelectedItem().toString());
        int year = Integer.parseInt(cbNam.getSelectedItem().toString());
        DefaultCategoryDataset dataset = createDatasetByMonthAndYear(month, year);
        JFreeChart chart = ChartFactory.createBarChart(
            "Thống kê doanh thu", "Ngày", "Doanh thu", dataset);
        CategoryPlot plot = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, new java.awt.Color(10,90,110));
        guiTongQuanTheoThang.removeAll();
        guiTongQuanTheoThang.add(new ChartPanel(chart), BorderLayout.CENTER);
        switchPanel(panelChart, guiTongQuanTheoThang);    
        
    	
//    	int month = Integer.parseInt(cbThang.getSelectedItem().toString());
//        int year = Integer.parseInt(cbNam.getSelectedItem().toString());
//        JPanel chartPanel = ChartHandler.createBarChart(month, year);
//        switchPanel(panelChart, chartPanel);
    }//GEN-LAST:event_btnTongQuanActionPerformed

    private void btnChiTietActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietActionPerformed
        // TODO add your handling code here:
        switchPanel(panelChart, guiChiTietTheoThang);
//        String thang = getSelectedMonThValue();
//        String nam = getSelectedYearValue();
//
//        // Dữ liệu mẫu
////        String[][] data = getChiTietDoanhThu(thang, nam);
//        String[] columnNames = {"Ngày", "Doanh thu"};
//        int month = Integer.parseInt(cbThang.getSelectedItem().toString());
//        int year = Integer.parseInt(cbNam.getSelectedItem().toString());
//        Object[][] data = fetchDetailDataByMonthAndYear(month, year);
//        JTable table = new JTable(data, columnNames);
//        JScrollPane scrollPane = new JScrollPane(table);
//
//        panelChart.removeAll();
//        panelChart.setLayout(new BorderLayout());
//        panelChart.add(scrollPane, BorderLayout.CENTER);
//        panelChart.revalidate();
//        panelChart.repaint();
        
//    	int month = Integer.parseInt(cbThang.getSelectedItem().toString());
//        int year = Integer.parseInt(cbNam.getSelectedItem().toString());
//        JPanel tablePanel = TableHandler.createTable(month, year);
//        switchPanel(panelChart, tablePanel);
    	
    }//GEN-LAST:event_btnChiTietActionPerformed

    
    private DefaultCategoryDataset createDatasetByMonthAndYear(int month, int year) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int day = 1; day <= 30; day++) {
            dataset.addValue(Math.random() * 1000000, "Doanh thu", "Ngày " + day);
        }
        return dataset;
    }

    private JTable createDetailTable(int month, int year) {
        String[] columns = {"Ngày", "Doanh thu"};
        Object[][] data = new Object[30][2];
        for (int i = 0; i < 30; i++) {
            data[i][0] = "Ngày " + (i + 1);
            data[i][1] = Math.random() * 1000000;
        }
        return new JTable(data, columns);
    }
    
    private int[] fetchRevenueDataByMonthAndYear(int month, int year) {
        // Dữ liệu mẫu giả lập, mỗi tháng có 30 ngày
        int[] revenues = new int[30];
        for (int i = 0; i < 30; i++) {
            revenues[i] = (int) (Math.random() * 1_000_000 + 100_000);
        }
        return revenues;
    }

    private Object[][] fetchDetailDataByMonthAndYear(int month, int year) {
        // Dữ liệu mẫu giả lập, mỗi tháng có 30 ngày
        Object[][] data = new Object[30][2];
        for (int i = 0; i < 30; i++) {
            data[i][0] = "Ngày " + (i + 1);
            data[i][1] = (int) (Math.random() * 1_000_000 + 100_000);
        }
        return data;
    }
    
    private JFreeChart createBarChartByMonth(String thang, String nam) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        // Lấy dữ liệu từ cơ sở dữ liệu hoặc logic xử lý
        int doanhThu = getDoanhThuTheoThang(thang, nam); 
        dataset.addValue(doanhThu, "Doanh thu", "Tháng " + thang);

        return ChartFactory.createBarChart(
            "Thống kê doanh thu tháng " + thang + " năm " + nam,
            "Tháng",
            "Doanh thu (VNĐ)",
            dataset
        );
    }
    private int getDoanhThuTheoThang(String thang, String nam) {
        // Đây là ví dụ, thay bằng truy vấn dữ liệu thực tế.
        return 10_000_000 + Integer.parseInt(thang) * 1_000_000;
    }
    private static void switchPanel(JPanel contentPanel, JPanel newPanel) {
        contentPanel.removeAll();
        contentPanel.setLayout(new BorderLayout());
        contentPanel.add(newPanel, BorderLayout.CENTER);
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    private void switchPanelWithReload(JPanel contentPanel, JPanel newPanel, Runnable dataLoader) {
        contentPanel.removeAll();
        dataLoader.run(); // Load lại dữ liệu
        contentPanel.setLayout(new BorderLayout());
        contentPanel.add(newPanel, BorderLayout.CENTER);
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    
    public String getSelectedMonThValue() {
        return cbThang.getSelectedItem().toString();
    }
    public String getSelectedYearValue() {
        return cbNam.getSelectedItem().toString();
    } 
     
    private String[][] getChiTietDoanhThu(String thang, String nam) {
        // Ví dụ: trả về dữ liệu mẫu
        return new String[][] {
            {"01/" + thang + "/" + nam, "1,000,000"},
            {"02/" + thang + "/" + nam, "2,000,000"},
            {"03/" + thang + "/" + nam, "3,500,000"}
        };
    }
    
//    private JFreeChart createBarChartByMonth() {
//        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
//        dataset.addValue(10_000_000, "Doanh thu", "Tháng 1");
//        dataset.addValue(12_000_000, "Doanh thu", "Tháng 2");
//        dataset.addValue(8_500_000, "Doanh thu", "Tháng 3");
//        dataset.addValue(15_000_000, "Doanh thu", "Tháng 4");
//        dataset.addValue(20_000_000, "Doanh thu", "Tháng 5");
//        dataset.addValue(18_000_000, "Doanh thu", "Tháng 6");
//        dataset.addValue(25_000_000, "Doanh thu", "Tháng 7");
//        dataset.addValue(22_000_000, "Doanh thu", "Tháng 8");
//        dataset.addValue(30_000_000, "Doanh thu", "Tháng 9");
//        dataset.addValue(28_000_000, "Doanh thu", "Tháng 10");
//        dataset.addValue(35_000_000, "Doanh thu", "Tháng 11");
//        dataset.addValue(40_000_000, "Doanh thu", "Tháng 12");
//
//        return ChartFactory.createBarChart("Thống kê doanh thu theo tháng", "Tháng", "Doanh thu (VNĐ)", dataset);
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChiTiet;
    private javax.swing.JButton btnTongQuan;
    private javax.swing.JComboBox<String> cbNam;
    private javax.swing.JComboBox<String> cbThang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel panelChart;
    // End of variables declaration//GEN-END:variables
}
